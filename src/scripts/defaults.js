/**
 *  @typedef {"fade" | "slide"} animationType
 */

/**
 * @typedef FlexsliderDefaults
 * @type {Object}
 *
 * @property {string}        namespace          - the unique name of the slider, also attached to the class of every element generated by the plugin
 * @property {string}        selector           - Must match a simple pattern. '{container} > {slide}'
 * @property {animationType} animation          - Select your animation type, "fade" or "slide"
 * @property {string}        easing             - Determines the easing method used in transitions. easing plugin is supported!
 * @property {string}        direction          - Select the sliding direction, "horizontal" or "vertical"
 * @property {boolean}       reverse            - Reverse the animation direction
 * @property {boolean}       animationLoop      - Should the animation loop? If false, directionNav will receive "disable" classes at either end
 * @property {boolean}       smoothHeight       - Allow height of the slider to animate smoothly in horizontal mode
 * @property {boolean}       startAt            - The slide that the slider should start on. Array notation (0 = first slide)
 * @property {boolean}       slideshow          - Animate slider automatically
 * @property {number}        slideshowSpeed     - Set the speed of the slideshow cycling, in milliseconds
 * @property {number}        animationSpeed     - Set the speed of animations, in milliseconds
 * @property {number}        initDelay          - Set an initialization delay, in milliseconds
 * @property {boolean}       randomize          - Randomize slide order
 * @property {boolean}       fadeFirstSlide     - Fade in the first slide when animation type is "fade"
 * @property {boolean}       thumbCaptions      - Whether to put captions on thumbnails when using the "thumbnails" controlNav.
 *
 * @property {boolean}       pauseOnAction      - Pause the slideshow when interacting with control elements, highly recommended.
 * @property {boolean}       pauseOnHover       - Pause the slideshow when hovering over slider, then resume when no longer hovering
 * @property {boolean}       pauseInvisible     - Pause the slideshow when tab is invisible, resume when visible. Provides better UX, lower CPU usage.
 * @property {boolean}       useCSS             - Slider will use CSS3 transitions if available
 * @property {boolean}       touch              - Allow touch swipe navigation of the slider on touch-enabled devices
 * @property {boolean}       video              - If using video in the slider, will prevent CSS3 3D Transforms to avoid graphical glitches
 * @property {boolean}       controlNav         - Create navigation for paging control of each slide? Note: Leave true for manualControls usage
 * @property {boolean}       directionNav       - Create navigation for previous/next navigation? (true/false)
 * @property {string}        prevText           - Set the text for the "previous" directionNav item
 * @property {string}        nextText           - Set the text for the "next" directionNav item
 * @property {boolean}       keyboard           - Allow slider navigating via keyboard left/right keys
 * @property {boolean}       multipleKeyboard   - Allow keyboard navigation to affect multiple sliders. Default behavior cuts out keyboard navigation with more than one slider present.
 * @property {boolean}       mousewheel         - Allows slider navigating via mousewheel
 * @property {boolean}       pausePlay          - Create pause/play dynamic element
 * @property {string}        pauseText          - Set the text for the "pause" pausePlay item
 * @property {string}        playText           - Set the text for the "play" pausePlay item
 *
 * @property {HTMLElement}   controlsContainer  - Object/ Declare which container the navigation elements should be appended too. Default container is the FlexSlider element. Example use would be $(".flexslider-container"). Property is ignored if given element is not found.
 * @property {HTMLElement}   manualControls     - Object/ Declare custom control navigation. Examples would be $(".flex-control-nav li") or "#tabs-nav li img", etc. The number of elements in your controlNav should match the number of slides/tabs.
 * @property {HTMLElement}   customDirectionNav - Object/ Custom prev / next button. Must be two elements. In order to make the events work they have to have the classes "prev" and "next" (plus namespace)
 *
 * @property {string}        sync               - Mirror the actions performed on this slider with another slider. Use with care.
 * @property {string}        asNavFor           - Internal property exposed for turning the slider into a thumbnail navigation for another slider
 * @property {number}        itemWidth          - Box-model width of individual carousel items, including horizontal borders and padding.
 * @property {number}        itemMargin         - Margin between carousel items.
 * @property {number}        minItems           - Minimum number of carousel items that should be visible. Items will resize fluidly when below this.
 * @property {number}        maxItems           - Maximum number of carousel items that should be visible. Items will resize fluidly when above this limit.
 * @property {number}        move               - Number of carousel items that should move on animation. If 0, slider will move all visible items.
 * @property {boolean}       allowOneSlide      - Whether to allow a slider comprised of a single slide
 * @property {boolean}       isFirefox          - Set to true when Firefox is the browser used.
 *
 * @property {Function}      start              - Fires when the slider loads the first slide
 * @property {Function}      before             - Fires asynchronously with each slider animation
 * @property {Function}      after              - Fires after each slider animation completes
 * @property {Function}      end                - Fires when the slider reaches the last slide (asynchronous)
 * @property {Function}      added              - Fires after a slide is added
 * @property {Function}      removed            - Fires after a slide is removed
 * @property {Function}      init               - Fires after the slider is initially setup
 * @property {boolean}       rtl                - Whether to enable RTL mode
 */

/** @type {FlexsliderDefaults} */
export const defaults = {
	namespace: 'flex-',
	selector: '.slides > li',
	animation: 'fade',
	easing: 'swing',
	direction: 'horizontal',
	reverse: false,
	animationLoop: true,
	smoothHeight: false,
	startAt: 0,
	slideshow: true,
	slideshowSpeed: 7000,
	animationSpeed: 600,
	initDelay: 0,
	randomize: false,
	fadeFirstSlide: true,
	thumbCaptions: false,

	// Usability features
	pauseOnAction: true,
	pauseOnHover: false,
	pauseInvisible: true,
	useCSS: true,
	touch: true,
	video: false,

	// Primary Controls
	controlNav: true,
	directionNav: true,
	prevText: 'Previous',
	nextText: 'Next',

	// Secondary Navigation
	keyboard: true,
	multipleKeyboard: false,
	mousewheel: false,
	pausePlay: false,
	pauseText: 'Pause',
	playText: 'Play',

	// Special properties
	controlsContainer: '',
	manualControls: '',
	customDirectionNav: '',
	sync: '',
	asNavFor: '',

	// Carousel Options
	itemWidth: 0,
	itemMargin: 0,
	minItems: 1,
	maxItems: 0,
	move: 0,
	allowOneSlide: true,

	// Browser Specific
	isFirefox: false,

	// Callback API
	start() {},
	before() {},
	after() {},
	end() {},
	added() {},
	removed() {},
	init() {},
	rtl: false,
};
